/** @file
    @brief Implementation

    @date 2016

    @author
    Sensics, Inc.
    <http://sensics.com>

*/

// Copyright 2016 Sensics, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Internal Includes
#include <osvr/Util/Log.h>
#include <osvr/Util/LogSinks.h>
#include <osvr/Util/PlatformConfig.h>
#include <osvr/Util/GetEnvironmentVariable.h>

// Library/third-party includes
#include <spdlog/spdlog.h>
#include <spdlog/sinks/ansicolor_sink.h>
#include <boost/filesystem.hpp>

// Standard includes
#include <memory>           // for std::make_shared, std::shared_ptr
#include <string>           // for std::string

#cmakedefine OSVR_UTIL_LOG_SINGLETON

namespace osvr {
namespace util {
namespace log {

// TODO if OSVR_ANDROID, use android sink

#ifdef OSVR_UTIL_LOG_SINGLETON
LoggerPtr make_logger(const std::string& logger_name)
{
    namespace fs = boost::filesystem;
    // If logger already exists, return a copy of it
    auto spd_logger = spdlog::get(logger_name);
    if (spd_logger)
        return std::make_shared<Logger>(spd_logger);

    // Bummer, it didn't exist. We'll create one from scratch.

    // Console sink
    auto console_out = spdlog::sinks::stderr_sink_st::instance();
    auto stdout_sink = std::make_shared<stdout_sink_mt>();
    auto color_sink = std::make_shared<spdlog::sinks::ansicolor_sink>(stdout_sink); // taste the rainbow!

    // File sink - rotates daily
    size_t q_size = 1048576; // queue size must be power of 2
    spdlog::set_async_mode(q_size);
    auto base_name = fs::path(getLoggingDirectory(true));
    if (!base_name.empty()) {
        base_name /= "osvr";
        auto daily_file_sink = std::make_shared<spdlog::sinks::daily_file_sink_mt>(base_name.string().c_str(), "log", 0, 0, false);

        std::vector<spdlog::sink_ptr> sinks;
        sinks.push_back(color_sink);
        sinks.push_back(daily_file_sink);

        spd_logger = spdlog::details::registry::instance().create(logger_name, begin(sinks), end(sinks));
    } else {
        spd_logger = spdlog::details::registry::instance().create(logger_name, color_sink);
    }

    spd_logger->set_pattern("%b %d %T.%e %l [%n]: %v");
    spd_logger->set_level(spdlog::level::trace);

    if (base_name.empty()) {
        spd_logger->warn("Failed to locate or create logging directory. Messages will be logged to the console only.");
    }

    return std::make_shared<Logger>(spd_logger);
}
#else
/*
 * This implementation avoids using a singleton.  The downside is that each call
 * to make_logger() will generate a new logger instead of reusing an existing
 * logger of the same name.
 *
 * It is recommended that you store the LoggerPtr locally to avoid this penalty.
 */
LoggerPtr make_logger(const std::string& logger_name)
{
    // FIXME use custom OSVR logger that splits output to STDOUT and STDERR and
    // log files based on severity levels, etc.
    auto sink = std::make_shared<stdout_sink_mt>();
    auto spd_logger = std::make_shared<::spdlog::logger>(logger_name, sink);
    spd_logger->set_pattern("%b %d %T.%e %l %n: %v");
    return std::make_shared<Logger>(spd_logger);
}
#endif

std::string getLoggingDirectory(bool make_dir)
{
    namespace fs = boost::filesystem;
    using osvr::util::getEnvironmentVariable;
    fs::path log_dir;

#if defined(OSVR_LINUX)
    // There's currently no great location for storing log files in the XDG
    // system. (See the STATE proposal by Debian
    // <https://wiki.debian.org/XDGBaseDirectorySpecification#Proposal:_STATE_directory>.)
    // So for now, we'll store our log files in the $XDG_CACHE_HOME directory.
    //
    // $XDG_CACHE_HOME defines the base directory relative to which user
    // specific non-essential data files should be stored. If $XDG_CACHE_HOME is
    // either not set or empty, a default equal to $HOME/.cache should be used.
    auto xdg_cache_dir = getEnvironmentVariable("XDG_CACHE_HOME");
    if (xdg_cache_dir) {
        log_dir = *xdg_cache_dir;
    } else {
        auto home_dir = getEnvironmentVariable("HOME");
        log_dir = fs::path(*home_dir) / ".cache";
    }
    log_dir /= fs::path("osvr") / "logs";
#elif defined(OSVR_MACOSX)
    auto home_dir = getEnvironmentVariable("HOME");
    if (home_dir) {
        log_dir = *home_dir;
    }
    log_dir /= "Library" / fs::path("Logs") / "OSVR";
#elif defined(OSVR_WINDOWS)
    auto local_app_dir = getEnvironmentVariable("LocalAppData");
    if (local_app_dir) {
        log_dir = *local_app_dir;
    } else {
        log_dir = "c:/";
    }
    log_dir /= fs::path("OSVR") / "Logs";
#endif

    if (fs::is_directory(log_dir))
        return log_dir.string();

    if (make_dir) {
        auto success = fs::create_directories(log_dir);
        if (!success) {
            log_dir.clear();
        }
    }

    return log_dir.string();
}

} // end namespace log
} // end namespace util
} // end namespace osvr

