/** @file
    @brief Implementation

    @date 2016

    @author
    Sensics, Inc.
    <http://sensics.com>

*/

// Copyright 2016 Sensics, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Internal Includes
#include <osvr/Util/Log.h>
#include <osvr/Util/LogSinks.h>

// Library/third-party includes
#include <spdlog/spdlog.h>
#include <spdlog/sinks/ansicolor_sink.h>

// Standard includes
#include <memory>           // for std::make_shared, std::shared_ptr
#include <string>           // for std::string

#cmakedefine OSVR_UTIL_LOG_SINGLETON

namespace osvr {
namespace util {
namespace log {

#ifdef OSVR_UTIL_LOG_SINGLETON
LoggerPtr make_logger(const std::string& logger_name)
{
#warning "OSVR_UTIL_LOG_SINGLETON enabled."
    // If logger already exists, return a copy of it
    auto spd_logger = spdlog::get(logger_name);
    if (spd_logger)
        return std::make_shared<Logger>(spd_logger);

    // Bummer, it didn't exist. We'll create one from scratch.

    // Console sink
    auto console_out = spdlog::sinks::stderr_sink_st::instance();
    auto stdout_sink = std::make_shared<stdout_sink_mt>();
    auto color_sink = std::make_shared<spdlog::sinks::ansicolor_sink>(stdout_sink); // taste the rainbow!

    // File sink - rotates daily
    //size_t q_size = 1048576; // queue size must be power of 2
    //spdlog::set_async_mode(q_size);
    //auto daily_file_sink = spdlog::sinks::daily_file_sink_mt(logger_name, "osvr", "log", 0, 0, false);

    //spd_logger = spdlog::details::registry::instance().create(logger_name, { color_sink, daily_file_sink });
    spd_logger = spdlog::details::registry::instance().create(logger_name, color_sink);
    spd_logger->set_pattern("%b %d %T.%e %l [%n]: %v");
    spd_logger->set_level(spdlog::level::trace);

    return std::make_shared<Logger>(spd_logger);
}
#else
#warning "OSVR_UTIL_LOG_SINGLETON disabled."
/*
 * This implementation avoids using a singleton.  The downside is that each call
 * to make_logger() will generate a new logger instead of reusing an existing
 * logger of the same name.
 *
 * It is recommended that you store the LoggerPtr locally to avoid this penalty.
 */
LoggerPtr make_logger(const std::string& logger_name)
{
    // FIXME use custom OSVR logger that splits output to STDOUT and STDERR and
    // log files based on severity levels, etc.
    auto sink = std::make_shared<stdout_sink_mt>();
    auto spd_logger = std::make_shared<::spdlog::logger>(logger_name, sink);
    spd_logger->set_pattern("%b %d %T.%e %l %n: %v");
    return std::make_shared<Logger>(spd_logger);
}
#endif

} // end namespace log
} // end namespace util
} // end namespace osvr

